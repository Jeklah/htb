this was a bit of everything learnt along the way chained together, and finally
an explanation of what a stack pivot is.

first off...a stack pivot is when you are able to run a rop gadget but don't have many
bytes, so you 'pivot' the stack to get more room. basically you find a pointer and jump to
where you have control and jump to there.

https://www.youtube.com/watch?v=i_5VQF18suQ
this video explains it well.

basically you can get the offset from ghidra for a pointer or a function
you need to find some of the hex numbers for got, plt, etc using the command line
use the following command to check version of libc being used

ldd pwnshop

and then use this to search

strings -a -t x <location of libc> | grep "/bin/sh"      (for example)

use https://libc.blukat.me/ to search for which libc the remote server may be
using.

so thats the tldr

long version is use there is a seg fault in buy option but it only leaves us
with 4 bytes to play with. so we need to return a pointer to earlier in the program
where we have control, i.e able to enter some input. using this method is called a stack
pivot. this is to gain more bytes to use, or more space for whatever. from there we found
the memory address of puts and searched for it on blukat which gave us a few results.
i tried the first two and it didn't work. this doesn't mean the script doesn't work!! 
it's just that it was the wrong version. i kept trying until i found the one that worked
on the remote. with a working libc on the remote, you can get a shell, as used in solve.py
